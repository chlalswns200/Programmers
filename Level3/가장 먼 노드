import heapq

def solution(n, edge):
    answer = 0
    
    INF = int(1e9)
    distance = [INF] * (n+1)
    graph = []
    for i in range(n+1):
        graph.append([])
    
    for x,y in edge:
        graph[x].append((y,1))
        graph[y].append((x,1))
        
    hq = []
    distance[1] = 0
    heapq.heappush(hq,(0,1))
    
    while hq:
        dist,now = heapq.heappop(hq)
        if distance[now] < dist:
            continue
        for i in graph[now]:
            cost = dist + i[1]
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(hq,(cost,i[0]))
            
    max_count = max(distance[1:-1])
    cnt = 0
    for i in range(1,len(distance)):
        if distance[i] == max_count:
            cnt+=1
    
    return cnt



        
        
        
